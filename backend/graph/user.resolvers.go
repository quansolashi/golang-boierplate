package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"

	"github.com/quansolashi/golang-boierplate/backend/ent"
	"github.com/quansolashi/golang-boierplate/backend/internal/entity/graph"
	"github.com/quansolashi/golang-boierplate/backend/pkg/security"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	pwd, err := security.Hash(input.Password)
	if err != nil {
		return nil, err
	}

	inputs := ent.CreateUserInput{
		Name:     input.Name,
		Email:    input.Email,
		Password: string(pwd),
	}
	user, err := ent.TxFromContext(ctx).User.Create().
		SetInput(inputs).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.Query().All(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uint) (*ent.User, error) {
	return r.Client.User.Get(ctx, uint64(id))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	userID := graph.UserIDFromContext(ctx)
	if userID == nil {
		return &ent.User{}, nil
	}

	uid := userID.UID()
	return r.Client.User.Get(ctx, uid)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
